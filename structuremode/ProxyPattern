定义：
  给目标对象提供一个代理对象，并由代理对象控制对目标对象的引用
  
  
  静态代理：这种代理模式需要代理对象和目标对象实现相同的接口。可以在不修改目标对象的基础上扩展功能。
    缺点：静态代理由于需要和目标对象实现相同的接口，当代理对象变多的时候代理类就会跟着增加，而且一旦更改了接口，那么目标对象和代理对象都要同时做出调整，不方便管理。
  动态代理：代理对象不需要实现目标对象接口，通过JAVA的API动态生成目标对象的代理对象。Proxy.newProxyInstance（。。。）,其中有三个参数：
    ClassLoader loader：目标对象的类加载器
    Class<?>[] interfaces：目标对象的接口类型
    InvocationHandler h：事件处理函数，实现对目标对象的操作。
  CGLIB动态代理：也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展。
    JDK的动态代理有一个限制,就是使用动态代理的对象必须实现一个或多个接口,如果想代理没有实现接口的类,就可以使用Cglib实现.
    Cglib是一个强大的高性能的代码生成包,它可以在运行期扩展java类与实现java接口.它广泛的被许多AOP的框架使用,例如Spring AOP和synaop,为他们提供方法的
  interception(拦截)
    Cglib包的底层是通过使用一个小而块的字节码处理框架ASM来转换字节码并生成新的类.不鼓励直接使用ASM,因为它要求你必须对JVM内部结构包括class文件的格式和
  指令集都很熟悉.
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
